// RandomNumberGeneratorExercise.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#include <iostream>
#include <numeric>
#include <random>
#include <vector>

static void RandomNumberGenerator_Approach_A(int a, int b, int loopCount)
{
    std::random_device rd;  // a seed source for the random number engine

    // mersenne_twister_engine seeded with rd() 
    // std::mt19937 has about *5008 bytes* which is a large amount of memory/processing power
    //So i placed static so that every time its called it doesn't make a new generator

    static auto gen = std::mt19937(rd());     
    
    //Distributes numbers from within the range of the min number value to max number value (a , b)
    auto distrib = std::uniform_int_distribution<>(a, b);

    //A static vector to hold generated numbers
    static std::vector<int> random_Number_Vector;

    //Push back generated numbers to vector
    for (int n = 0; n != loopCount; ++n) {
        random_Number_Vector.push_back(distrib(gen));
    }

    // Use distrib to transform the random unsigned int generated by gen into an int in [a, b]
    std::cout << "Uniform Int Distribution Method:\n[ ";
    for (auto& items : random_Number_Vector) {
        std::cout << items << " ";
    }
    std::cout << "]";
}

int main()
{
    //Between 0 and 100, generate 25 numbers
    RandomNumberGenerator_Approach_A(0,100,25);
    std::cin.get();
}

